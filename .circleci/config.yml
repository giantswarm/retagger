version: 2
jobs:
  skopeo:
    docker:
    - image: quay.io/skopeo/stable:v1.9.2
    # machine:
    #   image: ubuntu-2004:2022.04.1
    # resource_class: arm.medium
    steps:
      - run:
          name: login
          command: |
            skopeo login --password "${QUAY_PASSWORD}" --username "${QUAY_USERNAME}" quay.io

      - run:
          name: copy
          command: |
            skopeo copy --all --preserve-digests --multi-arch all --dest-precompute-digests docker://quay.io/coreos/etcd quay.io/giantswarm/etcd

  build:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - run:
          name: "architect/machine-install-go: Remove old Go"
          command: |
            sudo rm -rf /usr/local/go
      - run:
          name: "architect/machine-install-go: Download Go"
          command: |
            wget https://go.dev/dl/go1.18.5.linux-arm64.tar.gz
      - run:
          name: "architect/machine-install-go: Install Go"
          command: |
            sudo tar -C /usr/local -xzf go1.18.5.linux-arm64.tar.gz
      - run:
          name: "architect/machine-install-go: Set Go environment"
          command: |
            go env -w GOBIN=/home/circleci/.go_workspace/bin
      - run:
          name: "architect/machine-install-go: Remove downloaded Go files"
          command: |
            rm go1.18.5.linux-arm64.tar.gz

      - checkout

      - run:
          name: architect build
          command: |
            CGO_ENABLED=0 GOARCH="arm64" go build -ldflags "-w -linkmode 'auto' -extldflags '-static'" -o retagger .

      - persist_to_workspace:
          root: .
          paths:
            - ./retagger
            - ./images-e2e.yaml
            - ./images.yaml

  e2eQuay:
    environment:
      REGISTRY: "quay.io"
      REGISTRY_ORGANISATION: "giantswarm"
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Set registry credentials
          command: |
            echo 'export REGISTRY_USERNAME=${QUAY_USERNAME}' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD=${QUAY_PASSWORD}' >> $BASH_ENV
            source $BASH_ENV

  retagQuay:
    environment:
      REGISTRY: "quay.io"
      REGISTRY_ORGANISATION: "giantswarm"
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Set registry credentials
          command: |
            echo 'export REGISTRY_USERNAME=${QUAY_USERNAME}' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD=${QUAY_PASSWORD}' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Execute retagger
          command: ./retagger -r ${REGISTRY} -o ${REGISTRY_ORGANISATION} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}

  retagAliyun:
    environment:
      REGISTRY: "registry-intl.cn-shanghai.aliyuncs.com"
      REGISTRY_ORGANISATION: "giantswarm"
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Set registry credentials
          command: |
            echo 'export REGISTRY_USERNAME=${ALIYUN_USERNAME}' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD=${ALIYUN_PASSWORD}' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Execute retagger
          command: ./retagger -r ${REGISTRY} -o ${REGISTRY_ORGANISATION} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} --access-key ${ALIYUN_ACCESS_KEY} --access-secret ${ALIYUN_ACCESS_SECRET} --aliyun-region ${ALIYUN_REGION}

build_and_retag:  &build_and_retag
  jobs:
    - skopeo
    #- build
    #- e2eQuay:
    #    filters:
    #      branches:
    #        ignore: master
    #    requires:
    #      - build
    #- retagQuay:
    #    requires:
    #      - build
    #- retagAliyun:
    #    filters:
    #      branches:
    #        only: master
    #    requires:
    #      - build

workflows:
  version: 2
  build_retag:
    <<: *build_and_retag

  # Runs nightly at 21:30 UTC (22:30 Berlin)
  build_retag_nightly:
    triggers:
      - schedule:
          cron: "30 21 * * *"
          filters:
            branches:
              only: master
    <<: *build_and_retag
