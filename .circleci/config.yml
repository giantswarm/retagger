version: 2.1
orbs:
  architect: giantswarm/architect@4.27.0

jobs:
  validate:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - run:
          name: Validate YAML
          command: |
            docker run --rm -it \
             -v $PWD:/workdir \
             giantswarm/yamllint \
             -c .yamllint \
             images/*.yaml
      - persist_to_workspace:
          root: "images/"
          paths:
            - "images/*.yaml"
  build-go:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - run:
          name: Build Golang binary
          command: |
            CGO_ENABLED=0 GOOS=linux go build -ldflags "$(cat .ldflags)" -o retagger .
      - persist_to_workspace:
          root: .
          paths:
            - retagger

  build-and-push-docker:
    machine:
      image: ubuntu-2004:current
    parameters:
      username:
        type: string
      password:
        type: string
      registry:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build Docker image
          command: |
            docker build -t "<<parameters.registry>>/giantswarm/retagger:<<parameters.tag>>" .
      - run:
          name: Authenticate to Docker registry
          command: |
            docker login -u "<<parameters.username>>" -p "<<parameters.password>>" "<<parameters.registry>>"
      - run:
          name: Push Docker image
          command: |
            echo "Pushing tag '<<parameters.tag>>' to <<parameters.registry>>..."
            docker push "<<parameters.registry>>/giantswarm/retagger:<<parameters.tag>>"

  retag-registry:
    docker:
      - image: quay.io/giantswarm/retagger:${CIRCLE_TAG:-$CIRCLE_SHA1}
    parameters:
      username:
        type: string
      password:
        type: string
      registry:
        type: string
      images_file:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Log in to Docker registry
          command: |
            skopeo login -u "<<parameters.username>>" -p "<<parameters.password>>" "<<parameters.registry>>"
      - run:
          name: Retag images
          command: |
            skopeo sync --all --keep-going --src yaml --dest docker \
              "<<parameters.images_file>>" "<<parameters.registry>>/giantswarm" | tee /tmp/skopeo.log
      - store_artifacts:
          path: /tmp/skopeo.log
          destination: "<<parameters.registry>>.log"

  retag-customized-images:
    docker:
      - image: quay.io/giantswarm/retagger:${CIRCLE_TAG:-$CIRCLE_SHA1}
    parameters:
      log_level:
        type: string
        default: "debug"
      executor_count:
        type: int
        default: 1
      executor_id:
        type: int
        default: 0
    steps:
      - setup_remote_docker: {}
      - attach_workspace:
          at: .
      - run:
          name: "Log in to registries: docker"
          command: |
            docker login -u ${QUAY_USERNAME} -p ${QUAY_PASSWORD} quay.io
            docker login -u ${ALIYUN_USERNAME} -p ${ALIYUN_PASSWORD} giantswarm-registry.cn-shanghai.cr.aliyuncs.com
      - run:
          name: "Log in to registries: skopeo"
          command: |
            skopeo login -u ${QUAY_USERNAME} -p ${QUAY_PASSWORD} quay.io
            skopeo login -u ${ALIYUN_USERNAME} -p ${ALIYUN_PASSWORD} giantswarm-registry.cn-shanghai.cr.aliyuncs.com
      - run:
          name: "Run retagger"
          command: |
            ./retagger --log-level "<<parameters.log_level>>" \
              --executor-count <<parameters.executor_count>> --executor_id <<parameters.executor_id>>

# Define 'build_and_retag' workflow steps, so we can reuse it.
build_and_retag: &build_and_retag
  jobs:
    - validate:
        name: validate-images-yaml
    - build-go:
        context: architect
        name: build-go
        requires:
          - validate-images-yaml
        filters:
          tags:
            only: /^v.*/
    - build-and-push-docker:
        context: architect
        name: build-and-push-docker
        username: ${QUAY_USERNAME}
        password: ${QUAY_PASSWORD}
        registry: "quay.io"
        tag: ${CIRCLE_TAG:-$CIRCLE_SHA1}
        requires:
          - build-go
    - hold-for-approval:
        type: approval
        requires:
          - build-and-push-docker
    - retag-registry:
        context: architect
        name: retag-quay
        username: ${QUAY_USERNAME}
        password: ${QUAY_PASSWORD}
        registry: "quay.io"
        requires:
          - hold-for-approval
        matrix:
          parameters:
            images_file:
              - images/skopeo-docker-elastic-co.yaml
              - images/skopeo-docker-io.yaml
              - images/skopeo-eu-gcr-io.yaml
              - images/skopeo-gcr-io.yaml
              - images/skopeo-ghcr-io.yaml
              - images/skopeo-mcr-microsoft-com.yaml
              - images/skopeo-public-ecr-aws.yaml
              - images/skopeo-quay-io.yaml
              - images/skopeo-registry-k8s-io.yaml
    - retag-registry:
        context: architect
        name: retag-aliyun
        username: ${ALIYUN_USERNAME}
        password: ${ALIYUN_PASSWORD}
        registry: "giantswarm-registry.cn-shanghai.cr.aliyuncs.com"
        requires:
          - hold-for-approval
        matrix:
          parameters:
            images_file:
              - images/skopeo-docker-elastic-co.yaml
              - images/skopeo-docker-io.yaml
              - images/skopeo-eu-gcr-io.yaml
              - images/skopeo-gcr-io.yaml
              - images/skopeo-ghcr-io.yaml
              - images/skopeo-mcr-microsoft-com.yaml
              - images/skopeo-public-ecr-aws.yaml
              - images/skopeo-quay-io.yaml
              - images/skopeo-registry-k8s-io.yaml
    - retag-customized-images:
        context: architect
        name: retag-customized-images
        parameters:
          executor_count: 4
        requires:
          - hold-for-approval
        matrix:
          parameters:
            # i in range(executor_count)
            executor_id: [0, 1, 2, 3]

workflows:
  version: 2
  build_retag:
    <<: *build_and_retag

  # Runs nightly at 21:30 UTC (22:30 Berlin)
  build_retag_nightly:
    triggers:
      - schedule:
          cron: "30 21 * * *"
          filters:
            branches:
              only: main
    <<: *build_and_retag




# jobs:
#   validate:
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - checkout
#
#       - run:
#           name: Validate YAML
#           command: |
#             docker run --rm -ti \
#             -v $PWD:/workdir \
#             giantswarm/yamllint \
#             -d '{extends: default, rules: {line-length: {max: 200}, document-start: disable, indentation: {spaces: 0}}}' \
#             images.yaml
#
#   copy:
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - checkout
#       - persist_to_workspace:
#           root: .
#           paths:
#             - ./images.yaml
#
#   unitTest:
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - checkout
#       - run:
#           name: unit test
#           command: |
#             go test -v ./...
#
#   builde2e:
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - checkout
#       - run:
#           name: compile e2e test
#           command: |
#             docker run --rm -it \
#             -v $PWD:/go/src/github.com/giantswarm/retagger \
#             -w /go/src/github.com/giantswarm/retagger \
#             quay.io/giantswarm/golang:1.19.0 \
#             go test -c -tags e2e ./integration/test/e2e
#
#       - persist_to_workspace:
#           root: .
#           paths:
#             - ./e2e.test
#             - ./images-e2e.yaml
#
#   e2eQuay:
#     environment:
#       REGISTRY: "quay.io"
#       REGISTRY_ORGANISATION: "giantswarm"
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: Set registry credentials
#           command: |
#             echo 'export REGISTRY_USERNAME=${QUAY_USERNAME}' >> $BASH_ENV
#             echo 'export REGISTRY_PASSWORD=${QUAY_PASSWORD}' >> $BASH_ENV
#             source $BASH_ENV
#       - run:
#           name: Run e2e test
#           command: |
#             ./e2e.test -test.run ".*E2e.*" -test.v
#
#   retagQuay:
#     environment:
#       REGISTRY: "quay.io"
#       REGISTRY_ORGANISATION: "giantswarm"
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - attach_workspace:
#           at: .
#
#       - run:
#           name: Set registry credentials
#           command: |
#             echo 'export REGISTRY_USERNAME=${QUAY_USERNAME}' >> $BASH_ENV
#             echo 'export REGISTRY_PASSWORD=${QUAY_PASSWORD}' >> $BASH_ENV
#             source $BASH_ENV
#
#       - run:
#           name: Execute retagger
#           command: ./retagger -r ${REGISTRY} -o ${REGISTRY_ORGANISATION} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} > /tmp/quay.log
#
#       - store_artifacts:
#           path: /tmp/quay.log
#           destination: quay.log
#
#   retagAliyun:
#     environment:
#       REGISTRY: "registry-intl.cn-shanghai.aliyuncs.com"
#       REGISTRY_ORGANISATION: "giantswarm"
#     machine:
#       image: ubuntu-2004:2022.10.1
#     steps:
#       - attach_workspace:
#           at: .
#
#       - run:
#           name: Set registry credentials
#           command: |
#             echo 'export REGISTRY_USERNAME=${ALIYUN_USERNAME}' >> $BASH_ENV
#             echo 'export REGISTRY_PASSWORD=${ALIYUN_PASSWORD}' >> $BASH_ENV
#             source $BASH_ENV
#
#       - run:
#           name: Execute retagger
#           command: ./retagger -r ${REGISTRY} -o ${REGISTRY_ORGANISATION} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} --access-key ${ALIYUN_ACCESS_KEY} --access-secret ${ALIYUN_ACCESS_SECRET} --aliyun-region ${ALIYUN_REGION} > /tmp/aliyun.log
#
#       - store_artifacts:
#           path: /tmp/aliyun.log
#           destination: aliyun.log
#
# build_and_retag: &build_and_retag
#   jobs:
#     - validate
#     - unitTest:
#         filters:
#           branches:
#             ignore: main
#     - builde2e:
#         filters:
#           branches:
#             ignore: main
#         requires:
#           - validate
#     - architect/go-build:
#         context: architect
#         name: go-build
#         binary: retagger
#         requires:
#           - validate
#           - unitTest
#     - e2eQuay:
#         filters:
#           branches:
#             ignore: main
#         requires:
#           - builde2e
#           - go-build
#     - copy:
#         filters:
#           branches:
#             only: main
#         requires:
#           - validate
#     - retagQuay:
#         filters:
#           branches:
#             only: main
#         requires:
#           - copy
#           - go-build
#     - retagAliyun:
#         filters:
#           branches:
#             only: main
#         requires:
#           - copy
#           - go-build
#
# workflows:
#   version: 2
#   build_retag:
#     <<: *build_and_retag
#
#   # Runs nightly at 21:30 UTC (22:30 Berlin)
#   build_retag_nightly:
#     triggers:
#       - schedule:
#           cron: "30 21 * * *"
#           filters:
#             branches:
#               only: main
#     <<: *build_and_retag
